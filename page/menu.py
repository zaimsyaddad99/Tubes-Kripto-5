#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Nov 22, 2021 05:22:50 PM +07  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import page.menu_support as menu_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    menu_support.setTkVariable()
    top = mainWindow (root)
    menu_support.init(root, top)
    root.mainloop()

w = None
def create_mainWindow(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_mainWindow(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = mainWindow (w)
    menu_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_mainWindow():
    global w
    w.destroy()
    w = None

class mainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#ffffff'  # X11 color: 'white'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Zorque} -size 24"
        font14 = "-family {Segoe UI} -size 9"
        font9 = "-family {Segoe UI} -size 9"

        top.geometry("800x600+500+100")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Digital Signature")
        top.configure(background="#ffffff")

        self.titleLabel = tk.Label(top)
        self.titleLabel.place(relx=0.013, rely=0.017, height=136, width=780)
        self.titleLabel.configure(background="#ffffff")
        self.titleLabel.configure(disabledforeground="#a3a3a3")
        self.titleLabel.configure(font=font11)
        self.titleLabel.configure(foreground="#000000")
        self.titleLabel.configure(text='''DIGITAL SIGNATURE''')

        self.genPriKeyButton = tk.Button(top)
        self.genPriKeyButton.place(relx=0.3, rely=0.35, height=33, width=150)
        self.genPriKeyButton.configure(activebackground="#ececec")
        self.genPriKeyButton.configure(activeforeground="#000000")
        self.genPriKeyButton.configure(background="#ffffff")
        self.genPriKeyButton.configure(disabledforeground="#a3a3a3")
        self.genPriKeyButton.configure(font="-family {Segoe UI} -size 9")
        self.genPriKeyButton.configure(foreground="#000000")
        self.genPriKeyButton.configure(highlightbackground="#ffffff")
        self.genPriKeyButton.configure(highlightcolor="black")
        self.genPriKeyButton.configure(pady="0")
        self.genPriKeyButton.configure(text='''Generate Private Key''')
        self.genPriKeyButton.configure(command=lambda:menu_support.generatePriKey())

        self.genPubKeyButton = tk.Button(top)
        self.genPubKeyButton.place(relx=0.513, rely=0.35, height=33, width=150)
        self.genPubKeyButton.configure(activebackground="#ececec")
        self.genPubKeyButton.configure(activeforeground="#000000")
        self.genPubKeyButton.configure(background="#ffffff")
        self.genPubKeyButton.configure(disabledforeground="#a3a3a3")
        self.genPubKeyButton.configure(font="-family {Segoe UI} -size 9")
        self.genPubKeyButton.configure(foreground="#000000")
        self.genPubKeyButton.configure(highlightbackground="#ffffff")
        self.genPubKeyButton.configure(highlightcolor="black")
        self.genPubKeyButton.configure(pady="0")
        self.genPubKeyButton.configure(text='''Generate Public Key''')
        self.genPubKeyButton.configure(command=lambda:menu_support.generatePubKey())

        self.signButton = tk.Button(top)
        self.signButton.place(relx=0.4, rely=0.533, height=33, width=175)
        self.signButton.configure(activebackground="#ececec")
        self.signButton.configure(activeforeground="#000000")
        self.signButton.configure(background="#ffffff")
        self.signButton.configure(disabledforeground="#a3a3a3")
        self.signButton.configure(font=font14)
        self.signButton.configure(foreground="#000000")
        self.signButton.configure(highlightbackground="#ffffff")
        self.signButton.configure(highlightcolor="black")
        self.signButton.configure(pady="0")
        self.signButton.configure(text='''Sign Document(txt)''')
        self.signButton.configure(command=lambda:menu_support.openOptionWindow("S"))

        self.verifyButton = tk.Button(top)
        self.verifyButton.place(relx=0.4, rely=0.6, height=33, width=175)
        self.verifyButton.configure(activebackground="#ececec")
        self.verifyButton.configure(activeforeground="#000000")
        self.verifyButton.configure(background="#ffffff")
        self.verifyButton.configure(disabledforeground="#a3a3a3")
        self.verifyButton.configure(font=font9)
        self.verifyButton.configure(foreground="#000000")
        self.verifyButton.configure(highlightbackground="#ffffff")
        self.verifyButton.configure(highlightcolor="black")
        self.verifyButton.configure(pady="0")
        self.verifyButton.configure(text='''Verify Document(txt)''')
        self.verifyButton.configure(command=lambda:menu_support.openOptionWindow("V"))

        self.subtitle1Label = tk.Label(top)
        self.subtitle1Label.place(relx=0.3, rely=0.283, height=26, width=325)
        self.subtitle1Label.configure(background="#ffffff")
        self.subtitle1Label.configure(disabledforeground="#a3a3a3")
        self.subtitle1Label.configure(font="-family {Segoe UI} -size 9")
        self.subtitle1Label.configure(foreground="#000000")
        self.subtitle1Label.configure(text='''Generate your RSA key here!''')

        self.subtitle2Label = tk.Label(top)
        self.subtitle2Label.place(relx=0.263, rely=0.467, height=26, width=387)
        self.subtitle2Label.configure(activebackground="#f9f9f9")
        self.subtitle2Label.configure(activeforeground="black")
        self.subtitle2Label.configure(background="#ffffff")
        self.subtitle2Label.configure(disabledforeground="#a3a3a3")
        self.subtitle2Label.configure(font="-family {Segoe UI} -size 9")
        self.subtitle2Label.configure(foreground="#000000")
        self.subtitle2Label.configure(highlightbackground="#d9d9d9")
        self.subtitle2Label.configure(highlightcolor="black")
        self.subtitle2Label.configure(text='''Put your signature or Verify signed document here''')

        self.zaimImg = tk.Label(top)
        self.zaimImg.place(relx=0.275, rely=0.783, height=136, width=128)
        self.zaimImg.configure(activeforeground="#000000")
        self.zaimImg.configure(background="#ffffff")
        self.zaimImg.configure(disabledforeground="#a3a3a3")
        self.zaimImg.configure(font="-family {Segoe UI} -size 9")
        self.zaimImg.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"asset/zaim.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.zaimImg.configure(image=_img0)
        self.zaimImg.configure(text='''Label''')

        self.anggaImg = tk.Label(top)
        self.anggaImg.place(relx=0.6, rely=0.783, height=136, width=128)
        self.anggaImg.configure(activebackground="#f9f9f9")
        self.anggaImg.configure(activeforeground="#000000")
        self.anggaImg.configure(background="#ffffff")
        self.anggaImg.configure(disabledforeground="#a3a3a3")
        self.anggaImg.configure(font="-family {Segoe UI} -size 9")
        self.anggaImg.configure(foreground="#000000")
        self.anggaImg.configure(highlightbackground="#d9d9d9")
        self.anggaImg.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location,"asset/angga.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.anggaImg.configure(image=_img1)
        self.anggaImg.configure(text='''Label''')

        self.aryaImg = tk.Label(top)
        self.aryaImg.place(relx=0.438, rely=0.783, height=136, width=128)
        self.aryaImg.configure(activebackground="#f9f9f9")
        self.aryaImg.configure(activeforeground="#000000")
        self.aryaImg.configure(background="#ffffff")
        self.aryaImg.configure(disabledforeground="#a3a3a3")
        self.aryaImg.configure(font="-family {Segoe UI} -size 9")
        self.aryaImg.configure(foreground="#000000")
        self.aryaImg.configure(highlightbackground="#d9d9d9")
        self.aryaImg.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location,"asset/arya.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.aryaImg.configure(image=_img2)
        self.aryaImg.configure(text='''Label''')

        self.statusLabel = tk.Label(top)
        self.statusLabel.place(relx=0.125, rely=0.667, height=36, width=612)
        self.statusLabel.configure(background="#ffffff")
        self.statusLabel.configure(disabledforeground="#a3a3a3")
        self.statusLabel.configure(font="-family {Segoe UI} -size 9")
        self.statusLabel.configure(foreground="#000000")
        self.statusLabel.configure(text='''Status: App succesfully opened''')
        self.statusLabel.configure(textvariable=menu_support.labelStatusVar)

